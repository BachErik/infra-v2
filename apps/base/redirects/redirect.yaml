# -------------------------------
# Middleware-Objekte für Redirects
# -------------------------------

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-bsky-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://bsky\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://bsky.app/profile/kunamel.app/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-gh-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://gh\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://github.com/Kunamel/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-github-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://github\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://github.com/Kunamel/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-root-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://kunamel\\.app(?:/(.*))?"
    replacement: "https://github.com/Kunamel/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-twitter-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://twitter\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://x.com/Kunamelapp/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-x-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://x\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://x.com/Kunamelapp/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-youtube-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://youtube\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://www.youtube.com/@Kunamel/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-yt-kunamel
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://yt\\.kunamel\\.app(?:/(.*))?"
    replacement: "https://www.youtube.com/@Kunamel/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-bluesky-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://bluesky\\.lyre\\.works(?:/(.*))?"
    replacement: "https://bsky.app/profile/lyre.works/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-bsky-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://bsky\\.lyre\\.works(?:/(.*))?"
    replacement: "https://bsky.app/profile/lyre.works/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-gh-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://gh\\.lyre\\.works(?:/(.*))?"
    replacement: "https://github.com/LyreWorks/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-github-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://github\\.lyre\\.works(?:/(.*))?"
    replacement: "https://github.com/LyreWorks/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-root-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://lyre\\.works(?:/(.*))?"
    replacement: "https://github.com/LyreWorks/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-twitter-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://twitter\\.lyre\\.works(?:/(.*))?"
    replacement: "https://x.com/LyreWorks/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-x-lyre
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://x\\.lyre\\.works(?:/(.*))?"
    replacement: "https://x.com/LyreWorks/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-root-bachflow
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://bachflow\\.app(?:/(.*))?"
    replacement: "https://github.com/BachFlow/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-github-bachflow
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://github\\.bachflow\\.app(?:/(.*))?"
    replacement: "https://github.com/BachFlow/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-gh-bachflow
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://gh\\.bachflow\\.app(?:/(.*))?"
    replacement: "https://github.com/BachFlow/${1}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-dc-bacherik
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://dc\\.bacherik\\.de(?:/(.*))?"
    replacement: "https://discord.gg/9K8hVWcjFW"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-discord-bacherik
  namespace: default
spec:
  redirectRegex:
    regex: "^https?://discord\\.bacherik\\.de(?:/(.*))?"
    replacement: "https://discord.gg/9K8hVWcjFW"
    permanent: true

# -------------------------------
# IngressRoute-Objekte für Redirects
# -------------------------------

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-bsky-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "bsky.app/profile/kunamel.app"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`bsky.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-bsky-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-gh-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/Kunamel"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`gh.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-gh-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-github-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/Kunamel"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`github.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-github-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-root-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/Kunamel"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-root-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-twitter-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "x.com/Kunamelapp"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`twitter.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-twitter-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-x-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "x.com/Kunamelapp"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`x.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-x-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-youtube-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "www.youtube.com/@Kunamel"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`youtube.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-youtube-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-yt-kunamel
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "www.youtube.com/@Kunamel"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`yt.kunamel.app`)
      kind: Rule
      middlewares:
        - name: redirect-yt-kunamel
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-bluesky-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "bsky.app/profile/lyre.works"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`bluesky.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-bluesky-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-bsky-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "bsky.app/profile/lyre.works"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`bsky.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-bsky-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-gh-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/LyreWorks"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`gh.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-gh-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-github-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/LyreWorks"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`github.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-github-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-root-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/LyreWorks"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-root-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-twitter-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "x.com/LyreWorks"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`twitter.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-twitter-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-x-lyre
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "x.com/LyreWorks"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`x.lyre.works`)
      kind: Rule
      middlewares:
        - name: redirect-x-lyre
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-root-bachflow
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/BachFlow"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`bachflow.app`)
      kind: Rule
      middlewares:
        - name: redirect-root-bachflow
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-github-bachflow
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/BachFlow"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`github.bachflow.app`)
      kind: Rule
      middlewares:
        - name: redirect-github-bachflow
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-gh-bachflow
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "github.com/BachFlow"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`gh.bachflow.app`)
      kind: Rule
      middlewares:
        - name: redirect-gh-bachflow
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-dc-bacherik
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "discord.gg/9K8hVWcjFW"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`dc.bacherik.de`)
      kind: Rule
      middlewares:
        - name: redirect-dc-bacherik
      services:
        - name: noop@internal
          kind: TraefikService

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: redirect-discord-bacherik
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/target: "discord.gg/9K8hVWcjFW"
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`discord.bacherik.de`)
      kind: Rule
      middlewares:
        - name: redirect-discord-bacherik
      services:
        - name: noop@internal
          kind: TraefikService
